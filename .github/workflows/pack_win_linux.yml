name: Build_Win_Linux

on:
  # Executa ao fazer push para qualquer uma das branches abaixo
  push:
    branches:
      - main

  # Executa em eventos de pull request que tenham como destino uma das branches abaixo
  pull_request:
    branches:
      - main

  # Permite executar esse workflow manualmente pela aba "Actions" do repositório
  workflow_dispatch:

env:
  # https://flet.dev/docs/publish#versioning
  # Número de build (geralmente incrementado automaticamente)
  BUILD_NUMBER: 1

  # Versão da aplicação (exibida na build final)
  BUILD_VERSION: 1.0.0

  # Versão do Python a ser usada no win /  no win não é tem a versão 12 ainda dispinvel pelo git 
  PYTHON_VERSION_WIN: 3.10.11

  # Versão do flet-cli a ser instalada para usar o comando `flet build`
  FLET_CLI_VERSION: 0.27.5

  # Garante que o Python use codificação UTF-8 por padrão
  PYTHONUTF8: 1

  # Desativa saída com formatação rica no terminal do Flet CLI
  FLET_CLI_NO_RICH_OUTPUT: 1

  # Desativa barras de progresso ao usar o gerenciador UV
  UV_NO_PROGRESS: 1

jobs:
  build-windows:
    # Executa em uma máquina virtual com Windows
    runs-on: windows-latest

    steps:
    # Faz o checkout (baixa o código) do repositório
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura o Python com a versão definida nas variáveis de ambiente
    - name: Setup Python ${{ env.PYTHON_VERSION_WIN }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION_WIN }}

    # Instala o flet-cli na versão desejada
    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$env:FLET_CLI_VERSION

    #  Instalar todas as dependecias do projeto    
    - name: Install Python dependencies
      run: |
        pip install flet pyautogui PyInstaller screeninfo

    # Executa o processo de build para Windows com Flet
    - name: Pack app for Windows
      run: |
        cd ${{ github.workspace }}
        flet pack src/main.py --icon src/assets/img/ico.ico --add-data "src/assets;assets" --name TrackPoint

    # Faz upload da build como artefato (para baixar pela interface do GitHub)
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: build_windows
        path: dist/TrackPoint.exe
        if-no-files-found: error
        overwrite: false

  build-linux:
    name: Build for Linux
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-pip python3-venv python3-dev python3-tk \
            libgl1 libnss3 libxss1 libasound2 \
            libx11-xcb1 libxcomposite1 libxcursor1 \
            libxi6 libxtst6 libxrandr2 curl git binutils

      - name: Setup virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install flet pyautogui PyInstaller screeninfo
          
      - name: version glibc
        run: ldd --version

      - name: Build app
        run:  flet pack src/main.py --icon src/assets/img/ico.ico --add-data "src/assets:assets" --name TrackPoint

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: build_linux
          path: dist/TrackPoint
          if-no-files-found: error
          overwrite: false